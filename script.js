// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let gameState = {
    coins: 0,
    totalCoinsEarned: 0,
    energy: 100,
    maxEnergy: 100,
    lastEnergyUpdate: Date.now(),
    clickPower: 1,
    energyCost: 1,
    energyRegen: 0.5, // —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É
    combo: 0,
    maxCombo: 0,
    comboTimeout: null,
    comboMultiplier: 1,
    passiveIncome: 0,
    botLevel: 0,
    botProgress: 0,
    botLastUpdate: Date.now(),
    botCollectAmount: 0,
    dailyCollected: false,
    dailyLastCollected: 0,
    referralCode: generateReferralCode(),
    invitedFriends: 0,
    earnedFromFriends: 0,
    language: 'en',
    upgrades: {
        clickPower: { level: 0, maxLevel: 50, cost: 10, costMultiplier: 1.15 },
        energyCapacity: { level: 0, maxLevel: 20, cost: 25, costMultiplier: 1.2 },
        energyRegen: { level: 0, maxLevel: 15, cost: 30, costMultiplier: 1.25 },
        comboTime: { level: 0, maxLevel: 10, cost: 50, costMultiplier: 1.3 },
        comboMultiplier: { level: 0, maxLevel: 10, cost: 75, costMultiplier: 1.35 },
        passiveIncome: { level: 0, maxLevel: 10, cost: 100, costMultiplier: 1.4 },
        botLevel: { level: 0, maxLevel: 10, cost: 200, costMultiplier: 1.5 }
    },
    achievements: {}
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateReferralCode() {
    return 'DANK-' + Math.random().toString(36).substr(2, 6).toUpperCase();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function initAchievements() {
    const achievements = {
        // –ö–ª–∏–∫–∏
        clickerNovice: { name: { en: "Novice Clicker", ru: "–ù–æ–≤–∏—á–æ–∫ –≤ –∫–ª–∏–∫–∞—Ö" }, desc: { en: "Click 100 times", ru: "–°–¥–µ–ª–∞—Ç—å 100 –∫–ª–∏–∫–æ–≤" }, target: 100, reward: 100, emoji: "üñ±Ô∏è", progress: 0, completed: false },
        clickerApprentice: { name: { en: "Apprentice Clicker", ru: "–£—á–µ–Ω–∏–∫ –∫–ª–∏–∫–µ—Ä–∞" }, desc: { en: "Click 500 times", ru: "–°–¥–µ–ª–∞—Ç—å 500 –∫–ª–∏–∫–æ–≤" }, target: 500, reward: 500, emoji: "üñ±Ô∏è", progress: 0, completed: false },
        clickerExpert: { name: { en: "Expert Clicker", ru: "–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∏–∫–∞–º" }, desc: { en: "Click 1,000 times", ru: "–°–¥–µ–ª–∞—Ç—å 1,000 –∫–ª–∏–∫–æ–≤" }, target: 1000, reward: 1000, emoji: "üñ±Ô∏è", progress: 0, completed: false },
        clickerMaster: { name: { en: "Master Clicker", ru: "–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤" }, desc: { en: "Click 5,000 times", ru: "–°–¥–µ–ª–∞—Ç—å 5,000 –∫–ª–∏–∫–æ–≤" }, target: 5000, reward: 5000, emoji: "üñ±Ô∏è", progress: 0, completed: false },
        clickerLegend: { name: { en: "Legendary Clicker", ru: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–ª–∏–∫–µ—Ä" }, desc: { en: "Click 10,000 times", ru: "–°–¥–µ–ª–∞—Ç—å 10,000 –∫–ª–∏–∫–æ–≤" }, target: 10000, reward: 10000, emoji: "üñ±Ô∏è", progress: 0, completed: false },

        // –ö–æ–º–±–æ
        comboStarter: { name: { en: "Combo Starter", ru: "–ù–∞—á–∞–ª–æ –∫–æ–º–±–æ" }, desc: { en: "Reach 5x combo", ru: "–î–æ—Å—Ç–∏—á—å –∫–æ–º–±–æ x5" }, target: 5, reward: 250, emoji: "üî•", progress: 0, completed: false },
        comboMaster: { name: { en: "Combo Master", ru: "–ú–∞—Å—Ç–µ—Ä –∫–æ–º–±–æ" }, desc: { en: "Reach 10x combo", ru: "–î–æ—Å—Ç–∏—á—å –∫–æ–º–±–æ x10" }, target: 10, reward: 500, emoji: "üî•", progress: 0, completed: false },
        comboGod: { name: { en: "Combo God", ru: "–ë–æ–≥ –∫–æ–º–±–æ" }, desc: { en: "Reach 20x combo", ru: "–î–æ—Å—Ç–∏—á—å –∫–æ–º–±–æ x20" }, target: 20, reward: 1000, emoji: "üî•", progress: 0, completed: false },

        // –ú–æ–Ω–µ—Ç—ã
        coinCollector: { name: { en: "Coin Collector", ru: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º–æ–Ω–µ—Ç" }, desc: { en: "Earn 1,000 coins", ru: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 1,000 –º–æ–Ω–µ—Ç" }, target: 1000, reward: 200, emoji: "üí∞", progress: 0, completed: false },
        coinHoarder: { name: { en: "Coin Hoarder", ru: "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –º–æ–Ω–µ—Ç" }, desc: { en: "Earn 5,000 coins", ru: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 5,000 –º–æ–Ω–µ—Ç" }, target: 5000, reward: 500, emoji: "üí∞", progress: 0, completed: false },
        coinMillionaire: { name: { en: "Coin Millionaire", ru: "–ú–æ–Ω–µ—Ç–Ω—ã–π –º–∏–ª–ª–∏–æ–Ω–µ—Ä" }, desc: { en: "Earn 10,000 coins", ru: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 10,000 –º–æ–Ω–µ—Ç" }, target: 10000, reward: 1000, emoji: "üí∞", progress: 0, completed: false },
        coinTycoon: { name: { en: "Coin Tycoon", ru: "–ú–æ–Ω–µ—Ç–Ω—ã–π –º–∞–≥–Ω–∞—Ç" }, desc: { en: "Earn 50,000 coins", ru: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 50,000 –º–æ–Ω–µ—Ç" }, target: 50000, reward: 5000, emoji: "üí∞", progress: 0, completed: false },
        coinKing: { name: { en: "Coin King", ru: "–ö–æ—Ä–æ–ª—å –º–æ–Ω–µ—Ç" }, desc: { en: "Earn 100,000 coins", ru: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100,000 –º–æ–Ω–µ—Ç" }, target: 100000, reward: 10000, emoji: "üí∞", progress: 0, completed: false },

        // –£–ª—É—á—à–µ–Ω–∏—è
        upgradeNovice: { name: { en: "Upgrade Novice", ru: "–ù–æ–≤–∏—á–æ–∫ –≤ —É–ª—É—á—à–µ–Ω–∏—è—Ö" }, desc: { en: "Buy 5 upgrades", ru: "–ö—É–ø–∏—Ç—å 5 —É–ª—É—á—à–µ–Ω–∏–π" }, target: 5, reward: 250, emoji: "üîß", progress: 0, completed: false },
        upgradeExpert: { name: { en: "Upgrade Expert", ru: "–≠–∫—Å–ø–µ—Ä—Ç —É–ª—É—á—à–µ–Ω–∏–π" }, desc: { en: "Buy 15 upgrades", ru: "–ö—É–ø–∏—Ç—å 15 —É–ª—É—á—à–µ–Ω–∏–π" }, target: 15, reward: 750, emoji: "üîß", progress: 0, completed: false },
        upgradeMaster: { name: { en: "Upgrade Master", ru: "–ú–∞—Å—Ç–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π" }, desc: { en: "Buy 30 upgrades", ru: "–ö—É–ø–∏—Ç—å 30 —É–ª—É—á—à–µ–Ω–∏–π" }, target: 30, reward: 1500, emoji: "üîß", progress: 0, completed: false },

        // –≠–Ω–µ—Ä–≥–∏—è
        energySaver: { name: { en: "Energy Saver", ru: "–≠–∫–æ–Ω–æ–º–∏—Ç–µ–ª—å —ç–Ω–µ—Ä–≥–∏–∏" }, desc: { en: "Have 150 max energy", ru: "–ò–º–µ—Ç—å 150 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏" }, target: 150, reward: 300, emoji: "‚ö°", progress: 0, completed: false },
        energyMaster: { name: { en: "Energy Master", ru: "–ú–∞—Å—Ç–µ—Ä —ç–Ω–µ—Ä–≥–∏–∏" }, desc: { en: "Have 250 max energy", ru: "–ò–º–µ—Ç—å 250 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏" }, target: 250, reward: 500, emoji: "‚ö°", progress: 0, completed: false },

        // –†–µ—Ñ–µ—Ä–∞–ª—ã
        firstFriend: { name: { en: "First Friend", ru: "–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥" }, desc: { en: "Invite 1 friend", ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 –¥—Ä—É–≥–∞" }, target: 1, reward: 100, emoji: "üë•", progress: 0, completed: false },
        socialButterfly: { name: { en: "Social Butterfly", ru: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞" }, desc: { en: "Invite 3 friends", ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 –¥—Ä—É–∑–µ–π" }, target: 3, reward: 500, emoji: "üë•", progress: 0, completed: false },
        popular: { name: { en: "Popular", ru: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π" }, desc: { en: "Invite 5 friends", ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π" }, target: 5, reward: 750, emoji: "üë•", progress: 0, completed: false },
        influencer: { name: { en: "Influencer", ru: "–ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä" }, desc: { en: "Invite 10 friends", ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 –¥—Ä—É–∑–µ–π" }, target: 10, reward: 1500, emoji: "üë•", progress: 0, completed: false },
        viral: { name: { en: "Viral", ru: "–í–∏—Ä—É—Å–Ω—ã–π" }, desc: { en: "Invite 20 friends", ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 20 –¥—Ä—É–∑–µ–π" }, target: 20, reward: 2500, emoji: "üë•", progress: 0, completed: false },

        // –ë–æ—Ç
        botStarter: { name: { en: "Bot Starter", ru: "–ù–∞—á–∞–ª–æ –±–æ—Ç–∞" }, desc: { en: "Reach bot level 1", ru: "–î–æ—Å—Ç–∏—á—å 1 —É—Ä–æ–≤–Ω—è –±–æ—Ç–∞" }, target: 1, reward: 500, emoji: "ü§ñ", progress: 0, completed: false },
        botMaster: { name: { en: "Bot Master", ru: "–ú–∞—Å—Ç–µ—Ä –±–æ—Ç–∞" }, desc: { en: "Reach bot level 5", ru: "–î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è –±–æ—Ç–∞" }, target: 5, reward: 2500, emoji: "ü§ñ", progress: 0, completed: false },
        botGod: { name: { en: "Bot God", ru: "–ë–æ–≥ –±–æ—Ç–æ–≤" }, desc: { en: "Reach bot level 10", ru: "–î–æ—Å—Ç–∏—á—å 10 —É—Ä–æ–≤–Ω—è –±–æ—Ç–∞" }, target: 10, reward: 10000, emoji: "ü§ñ", progress: 0, completed: false },

        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        dailyNovice: { name: { en: "Daily Novice", ru: "–ù–æ–≤–∏—á–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" }, desc: { en: "Claim 3 daily rewards", ru: "–ü–æ–ª—É—á–∏—Ç—å 3 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã" }, target: 3, reward: 300, emoji: "üéÅ", progress: 0, completed: false },
        dailyExpert: { name: { en: "Daily Expert", ru: "–≠–∫—Å–ø–µ—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" }, desc: { en: "Claim 7 daily rewards", ru: "–ü–æ–ª—É—á–∏—Ç—å 7 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" }, target: 7, reward: 700, emoji: "üéÅ", progress: 0, completed: false },
        dailyMaster: { name: { en: "Daily Master", ru: "–ú–∞—Å—Ç–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" }, desc: { en: "Claim 15 daily rewards", ru: "–ü–æ–ª—É—á–∏—Ç—å 15 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" }, target: 15, reward: 1500, emoji: "üéÅ", progress: 0, completed: false },
        dailyLegend: { name: { en: "Daily Legend", ru: "–õ–µ–≥–µ–Ω–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" }, desc: { en: "Claim 30 daily rewards", ru: "–ü–æ–ª—É—á–∏—Ç—å 30 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥" }, target: 30, reward: 3000, emoji: "üéÅ", progress: 0, completed: false },

        // –†–∞–∑–Ω–æ–µ
        energyEfficient: { name: { en: "Energy Efficient", ru: "–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π" }, desc: { en: "Click 100 times without running out of energy", ru: "–ö–ª–∏–∫–Ω—É—Ç—å 100 —Ä–∞–∑ –±–µ–∑ –∏—Å—Ç–æ—â–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏" }, target: 100, reward: 500, emoji: "‚ôªÔ∏è", progress: 0, completed: false },
        richAndFamous: { name: { en: "Rich and Famous", ru: "–ë–æ–≥–∞—Ç—ã–π –∏ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π" }, desc: { en: "Earn 50,000 coins and invite 5 friends", ru: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 50,000 –º–æ–Ω–µ—Ç –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π" }, target: 1, reward: 5000, emoji: "üåü", progress: 0, completed: false },
        completionist: { name: { en: "Completionist", ru: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ–ª—å" }, desc: { en: "Complete all other achievements", ru: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" }, target: 1, reward: 0, emoji: "üèÖ", progress: 0, completed: false }
    };

    gameState.achievements = achievements;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
function initReferralBonuses() {
    return [
        { invited: 3, reward: 5000, emoji: "ü•â", completed: false },
        { invited: 5, reward: 7500, emoji: "üéñÔ∏è", completed: false },
        { invited: 10, reward: 15000, emoji: "üèÖ", completed: false },
        { invited: 15, reward: 22000, emoji: "ü•à", completed: false },
        { invited: 20, reward: 25000, emoji: "üèÜ", completed: false },
        { invited: 50, reward: 100000, emoji: "üíé", completed: false },
        { invited: 100, reward: 500000, emoji: "üëë", completed: false }
    ];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
function loadGame() {
    const savedGame = localStorage.getItem('dankDoshSave');
    if (savedGame) {
        const parsed = JSON.parse(savedGame);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (parsed.version === '1.0') {
            Object.assign(gameState, parsed);

            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
            updateEnergy();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–æ—Ç–∞
            updateBotProgress();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
            checkDailyReward();
        } else {
            // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            newGame();
        }
    } else {
        newGame();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (Object.keys(gameState.achievements).length === 0) {
        initAchievements();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
    gameState.referralBonuses = initReferralBonuses();

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateUI();
    renderUpgrades();
    renderAchievements();
    renderReferralBonuses();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    gameLoop();
}

// –ù–æ–≤–∞—è –∏–≥—Ä–∞
function newGame() {
    gameState = {
        coins: 0,
        totalCoinsEarned: 0,
        energy: 100,
        maxEnergy: 100,
        lastEnergyUpdate: Date.now(),
        clickPower: 1,
        energyCost: 1,
        energyRegen: 0.5,
        combo: 0,
        maxCombo: 0,
        comboMultiplier: 1,
        passiveIncome: 0,
        botLevel: 0,
        botProgress: 0,
        botLastUpdate: Date.now(),
        botCollectAmount: 0,
        dailyCollected: false,
        dailyLastCollected: 0,
        referralCode: generateReferralCode(),
        invitedFriends: 0,
        earnedFromFriends: 0,
        language: 'en',
        upgrades: {
            clickPower: { level: 0, maxLevel: 50, cost: 10, costMultiplier: 1.15 },
            energyCapacity: { level: 0, maxLevel: 20, cost: 25, costMultiplier: 1.2 },
            energyRegen: { level: 0, maxLevel: 15, cost: 30, costMultiplier: 1.25 },
            comboTime: { level: 0, maxLevel: 10, cost: 50, costMultiplier: 1.3 },
            comboMultiplier: { level: 0, maxLevel: 10, cost: 75, costMultiplier: 1.35 },
            passiveIncome: { level: 0, maxLevel: 10, cost: 100, costMultiplier: 1.4 },
            botLevel: { level: 0, maxLevel: 10, cost: 200, costMultiplier: 1.5 }
        },
        version: '1.0'
    };

    initAchievements();
    saveGame();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    gameState.lastEnergyUpdate = Date.now();
    gameState.botLastUpdate = Date.now();
    localStorage.setItem('dankDoshSave', JSON.stringify(gameState));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
function updateEnergy() {
    const now = Date.now();
    const timePassed = (now - gameState.lastEnergyUpdate) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    if (timePassed > 0) {
        const energyGain = timePassed * gameState.energyRegen;
        gameState.energy = Math.min(gameState.energy + energyGain, gameState.maxEnergy);
        gameState.lastEnergyUpdate = now;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±–æ—Ç–∞
function updateBotProgress() {
    if (gameState.botLevel > 0) {
        const now = Date.now();
        const timePassed = (now - gameState.botLastUpdate) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        // –ë–æ—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç —à–∫–∞–ª—É –∑–∞ 12 —á–∞—Å–æ–≤ (43200 —Å–µ–∫—É–Ω–¥)
        const progressGain = (timePassed / 43200) * 100;
        gameState.botProgress = Math.min(gameState.botProgress + progressGain, 100);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ñ–∞—Ä–º–∏–ª –±–æ—Ç
        const botEarnings = gameState.botLevel * 100 * (progressGain / 100);
        gameState.botCollectAmount += botEarnings;

        gameState.botLastUpdate = now;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
function checkDailyReward() {
    const now = Date.now();
    const lastCollected = gameState.dailyLastCollected;
    const oneDay = 24 * 60 * 60 * 1000; // 1 –¥–µ–Ω—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    if (lastCollected === 0 || now - lastCollected >= oneDay) {
        gameState.dailyCollected = false;
    } else {
        gameState.dailyCollected = true;
    }
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
    updateEnergy();
    updateBotProgress();
    updateUI();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    if (Date.now() - gameState.lastEnergyUpdate > 10000) {
        saveGame();
    }

    requestAnimationFrame(gameLoop);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    document.getElementById('coins').textContent = Math.floor(gameState.coins).toLocaleString();
    document.getElementById('energy').textContent = Math.floor(gameState.energy);
    document.getElementById('max-energy').textContent = Math.floor(gameState.maxEnergy);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–æ—Ç–∞
    document.getElementById('bot-progress').style.width = `${gameState.botProgress}%`;
    document.getElementById('collect-bot').disabled = gameState.botProgress < 100;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    if (gameState.botProgress >= 100) {
        document.getElementById('bot-time').textContent = gameState.language === 'en' ? 'Ready!' : '–ì–æ—Ç–æ–≤–æ!';
    } else {
        const remaining = 43200 - (43200 * (gameState.botProgress / 100)); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const hours = Math.floor(remaining / 3600);
        const minutes = Math.floor((remaining % 3600) / 60);
        const seconds = Math.floor(remaining % 60);

        if (gameState.language === 'en') {
            document.getElementById('bot-time').textContent = `${hours}h ${minutes}m ${seconds}s`;
        } else {
            document.getElementById('bot-time').textContent = `${hours}—á ${minutes}–º ${seconds}—Å`;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    document.getElementById('multiplier').textContent = `x${gameState.comboMultiplier.toFixed(1)}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    document.getElementById('referral-code').value = gameState.referralCode;
    document.getElementById('invited-count').textContent = gameState.invitedFriends;
    document.getElementById('earned-from-friends').textContent = Math.floor(gameState.earnedFromFriends).toLocaleString();

    // –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
    updateDailyRewardUI();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
function updateDailyRewardUI() {
    const dailyTimer = document.getElementById('daily-timer');
    const claimButton = document.getElementById('claim-daily');
    const dailyAmount = document.getElementById('daily-amount');

    if (gameState.dailyCollected) {
        const now = Date.now();
        const lastCollected = gameState.dailyLastCollected;
        const oneDay = 24 * 60 * 60 * 1000;
        const nextAvailable = lastCollected + oneDay;
        const timeLeft = nextAvailable - now;

        const hours = Math.floor(timeLeft / (60 * 60 * 1000));
        const minutes = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));
        const seconds = Math.floor((timeLeft % (60 * 1000)) / 1000);

        if (gameState.language === 'en') {
            dailyTimer.textContent = `Next reward in: ${hours}h ${minutes}m ${seconds}s`;
            claimButton.textContent = 'Claimed Today';
            dailyAmount.textContent = `Next reward: ${calculateDailyReward()}`;
        } else {
            dailyTimer.textContent = `–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${hours}—á ${minutes}–º ${seconds}—Å`;
            claimButton.textContent = '–ü–æ–ª—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è';
            dailyAmount.textContent = `–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${calculateDailyReward()}`;
        }

        claimButton.disabled = true;
    } else {
        if (gameState.language === 'en') {
            dailyTimer.textContent = 'Available now!';
            claimButton.textContent = 'Claim Reward';
            dailyAmount.textContent = `Today's reward: ${calculateDailyReward()}`;
        } else {
            dailyTimer.textContent = '–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å!';
            claimButton.textContent = '–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É';
            dailyAmount.textContent = `–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${calculateDailyReward()}`;
        }

        claimButton.disabled = false;
    }
}

// –†–∞—Å—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
function calculateDailyReward() {
    const baseReward = 1000;
    const balanceBonus = Math.min(gameState.coins * 0.01, 14000); // –ú–∞–∫—Å–∏–º—É–º 14000 + 1000 = 15000
    const totalReward = Math.floor(baseReward + balanceBonus);
    return totalReward.toLocaleString();
}

// –ö–ª–∏–∫ –ø–æ –º–æ–Ω–µ—Ç–µ
function clickCoin() {
    if (gameState.energy >= gameState.energyCost) {
        // –†–∞—Å—Ö–æ–¥—É–µ–º —ç–Ω–µ—Ä–≥–∏—é
        gameState.energy -= gameState.energyCost;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ
        gameState.combo++;
        gameState.maxCombo = Math.max(gameState.maxCombo, gameState.combo);

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–º–±–æ
        updateComboMultiplier();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        const coinsEarned = gameState.clickPower * gameState.comboMultiplier;
        gameState.coins += coinsEarned;
        gameState.totalCoinsEarned += coinsEarned;

        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
        createClickEffect(coinsEarned);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ
        updateComboDisplay();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements('click', 1);
        checkAchievements('coins', coinsEarned);
        checkAchievements('combo', gameState.combo);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
        saveGame();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞
function createClickEffect(amount) {
    const coin = document.getElementById('click-coin');
    const rect = coin.getBoundingClientRect();
    const x = rect.left + rect.width / 2;
    const y = rect.top + rect.height / 2;

    const effect = document.createElement('div');
    effect.className = 'coin-effect';
    effect.textContent = `+${Math.floor(amount)}`;
    effect.style.left = `${x}px`;
    effect.style.top = `${y}px`;
    document.body.appendChild(effect);

    // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        effect.remove();
    }, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∫–æ–º–±–æ
function updateComboMultiplier() {
    const baseMultiplier = 1;
    const comboBonus = gameState.combo * 0.05 * (1 + gameState.upgrades.comboMultiplier.level * 0.1);
    gameState.comboMultiplier = baseMultiplier + comboBonus;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–±–æ
function updateComboDisplay() {
    const comboDisplay = document.getElementById('combo-display');

    if (gameState.combo > 1) {
        if (gameState.language === 'en') {
            comboDisplay.textContent = `Combo x${gameState.combo}!`;
        } else {
            comboDisplay.textContent = `–ö–æ–º–±–æ x${gameState.combo}!`;
        }
        comboDisplay.style.opacity = '1';
    } else {
        comboDisplay.style.opacity = '0';
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–º–±–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (gameState.comboTimeout) {
        clearTimeout(gameState.comboTimeout);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∞ –∫–æ–º–±–æ
    const comboTime = 3000 + (gameState.upgrades.comboTime.level * 500); // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è + –±–æ–Ω—É—Å –æ—Ç —É–ª—É—á—à–µ–Ω–∏—è
    gameState.comboTimeout = setTimeout(() => {
        gameState.combo = 0;
        gameState.comboMultiplier = 1;
        comboDisplay.style.opacity = '0';
        saveGame();
    }, comboTime);
}

// –°–±–æ—Ä –º–æ–Ω–µ—Ç –æ—Ç –±–æ—Ç–∞
function collectBotCoins() {
    if (gameState.botProgress >= 100) {
        const coinsEarned = Math.floor(gameState.botCollectAmount);
        gameState.coins += coinsEarned;
        gameState.totalCoinsEarned += coinsEarned;
        gameState.botProgress = 0;
        gameState.botCollectAmount = 0;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(gameState.language === 'en'
            ? `Collected ${coinsEarned.toLocaleString()} coins from your bot!`
            : `–°–æ–±—Ä–∞–Ω–æ ${coinsEarned.toLocaleString()} –º–æ–Ω–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements('coins', coinsEarned);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
        saveGame();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
function claimDailyReward() {
    if (!gameState.dailyCollected) {
        const reward = calculateDailyReward();
        gameState.coins += reward;
        gameState.totalCoinsEarned += reward;
        gameState.dailyCollected = true;
        gameState.dailyLastCollected = Date.now();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(gameState.language === 'en'
            ? `You claimed your daily reward of ${reward.toLocaleString()} coins!`
            : `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –≤ —Ä–∞–∑–º–µ—Ä–µ ${reward.toLocaleString()} –º–æ–Ω–µ—Ç!`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements('daily', 1);
        checkAchievements('coins', reward);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
        saveGame();
    }
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = gameState.upgrades[upgradeId];

    if (upgrade.level < upgrade.maxLevel && gameState.coins >= upgrade.cost) {
        // –ü–æ–∫—É–ø–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        gameState.coins -= upgrade.cost;
        upgrade.level++;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        upgrade.cost = Math.floor(upgrade.cost * upgrade.costMultiplier);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
        applyUpgradeEffect(upgradeId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements('upgrades', 1);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        renderUpgrades();
        updateUI();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
        saveGame();
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
function applyUpgradeEffect(upgradeId) {
    switch (upgradeId) {
        case 'clickPower':
            gameState.clickPower = 1 + gameState.upgrades.clickPower.level * 0.5;
            break;
        case 'energyCapacity':
            gameState.maxEnergy = 100 + gameState.upgrades.energyCapacity.level * 10;
            gameState.energy = Math.min(gameState.energy, gameState.maxEnergy);
            break;
        case 'energyRegen':
            gameState.energyRegen = 0.5 + gameState.upgrades.energyRegen.level * 0.1;
            break;
        case 'comboTime':
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ updateComboMultiplier
            break;
        case 'comboMultiplier':
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ updateComboMultiplier
            break;
        case 'passiveIncome':
            gameState.passiveIncome = gameState.upgrades.passiveIncome.level * 0.1;
            break;
        case 'botLevel':
            gameState.botLevel = gameState.upgrades.botLevel.level;
            break;
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    const upgradesList = document.getElementById('upgrades-list');
    upgradesList.innerHTML = '';

    const upgrades = [
        { id: 'clickPower', emoji: 'üí™', name: { en: 'Click Power', ru: '–°–∏–ª–∞ –∫–ª–∏–∫–∞' }, desc: { en: 'Increases coins per click', ru: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–ª–∏–∫' } },
        { id: 'energyCapacity', emoji: '‚ö°', name: { en: 'Energy Capacity', ru: '–Å–º–∫–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏' }, desc: { en: 'Increases max energy', ru: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é' } },
        { id: 'energyRegen', emoji: '‚ôªÔ∏è', name: { en: 'Energy Regen', ru: '–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏' }, desc: { en: 'Increases energy regeneration', ru: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏' } },
        { id: 'comboTime', emoji: '‚è±Ô∏è', name: { en: 'Combo Time', ru: '–í—Ä–µ–º—è –∫–æ–º–±–æ' }, desc: { en: 'Increases combo duration', ru: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–±–æ' } },
        { id: 'comboMultiplier', emoji: 'üî•', name: { en: 'Combo Multiplier', ru: '–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–º–±–æ' }, desc: { en: 'Increases combo multiplier', ru: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–º–±–æ' } },
        { id: 'passiveIncome', emoji: 'üí∞', name: { en: 'Passive Income', ru: '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥' }, desc: { en: 'Earn coins over time', ru: '–ü–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º' } },
        { id: 'botLevel', emoji: 'ü§ñ', name: { en: 'Bot Level', ru: '–£—Ä–æ–≤–µ–Ω—å –±–æ—Ç–∞' }, desc: { en: 'Increases bot farming', ru: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ñ–∞—Ä–º–∏–Ω–≥ –±–æ—Ç–∞' } }
    ];

    for (const upgrade of upgrades) {
        const upgradeData = gameState.upgrades[upgrade.id];
        const upgradeItem = document.createElement('div');
        upgradeItem.className = 'upgrade-item';

        const upgradeInfo = document.createElement('div');
        upgradeInfo.className = 'upgrade-info';

        const upgradeName = document.createElement('div');
        upgradeName.className = 'upgrade-name';
        upgradeName.textContent = `${upgrade.emoji} ${upgrade.name[gameState.language]}`;

        const upgradeDesc = document.createElement('div');
        upgradeDesc.className = 'upgrade-desc';
        upgradeDesc.textContent = upgrade.desc[gameState.language];

        const upgradeLevel = document.createElement('div');
        upgradeLevel.className = 'upgrade-level';
        if (gameState.language === 'en') {
            upgradeLevel.textContent = `Level ${upgradeData.level}/${upgradeData.maxLevel}`;
        } else {
            upgradeLevel.textContent = `–£—Ä–æ–≤–µ–Ω—å ${upgradeData.level}/${upgradeData.maxLevel}`;
        }

        const upgradeCost = document.createElement('div');
        upgradeCost.className = 'upgrade-cost';
        upgradeCost.textContent = `${upgradeData.cost.toLocaleString()} coins`;

        upgradeInfo.appendChild(upgradeName);
        upgradeInfo.appendChild(upgradeDesc);
        upgradeInfo.appendChild(upgradeLevel);
        upgradeInfo.appendChild(upgradeCost);

        const upgradeBtn = document.createElement('button');
        upgradeBtn.className = 'upgrade-btn';

        if (upgradeData.level >= upgradeData.maxLevel) {
            if (gameState.language === 'en') {
                upgradeBtn.textContent = 'Maxed';
            } else {
                upgradeBtn.textContent = '–ú–∞–∫—Å.';
            }
            upgradeBtn.disabled = true;
        } else if (gameState.coins < upgradeData.cost) {
            if (gameState.language === 'en') {
                upgradeBtn.textContent = 'Not enough';
            } else {
                upgradeBtn.textContent = '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç';
            }
            upgradeBtn.disabled = true;
        } else {
            if (gameState.language === 'en') {
                upgradeBtn.textContent = 'Upgrade';
            } else {
                upgradeBtn.textContent = '–£–ª—É—á—à–∏—Ç—å';
            }
            upgradeBtn.disabled = false;
        }

        upgradeBtn.addEventListener('click', () => buyUpgrade(upgrade.id));

        upgradeItem.appendChild(upgradeInfo);
        upgradeItem.appendChild(upgradeBtn);
        upgradesList.appendChild(upgradeItem);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function renderAchievements() {
    const achievementsList = document.getElementById('achievements-list');
    achievementsList.innerHTML = '';

    for (const [id, achievement] of Object.entries(gameState.achievements)) {
        const achievementItem = document.createElement('div');
        achievementItem.className = `achievement-item ${achievement.completed ? '' : 'achievement-locked'}`;

        const achievementIcon = document.createElement('div');
        achievementIcon.className = 'achievement-icon';
        achievementIcon.textContent = achievement.emoji;

        const achievementInfo = document.createElement('div');
        achievementInfo.className = 'achievement-info';

        const achievementName = document.createElement('div');
        achievementName.className = 'achievement-name';
        achievementName.textContent = achievement.name[gameState.language];

        const achievementDesc = document.createElement('div');
        achievementDesc.className = 'achievement-desc';
        achievementDesc.textContent = achievement.desc[gameState.language];

        const achievementProgress = document.createElement('div');
        achievementProgress.className = 'achievement-progress';

        const achievementProgressBar = document.createElement('div');
        achievementProgressBar.className = 'achievement-progress-bar';

        if (achievement.completed) {
            achievementProgressBar.style.width = '100%';
        } else {
            const progress = (achievement.progress / achievement.target) * 100;
            achievementProgressBar.style.width = `${Math.min(progress, 100)}%`;
        }

        achievementProgress.appendChild(achievementProgressBar);

        const achievementReward = document.createElement('div');
        achievementReward.className = 'achievement-reward';
        achievementReward.textContent = `+${achievement.reward}`;

        achievementInfo.appendChild(achievementName);
        achievementInfo.appendChild(achievementDesc);

        if (!achievement.completed) {
            achievementInfo.appendChild(achievementProgress);
        }

        achievementItem.appendChild(achievementIcon);
        achievementItem.appendChild(achievementInfo);

        if (achievement.completed) {
            achievementItem.appendChild(achievementReward);
        }

        achievementsList.appendChild(achievementItem);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
function renderReferralBonuses() {
    const bonusesList = document.getElementById('referral-bonuses-list');
    bonusesList.innerHTML = '';

    for (const bonus of gameState.referralBonuses) {
        const bonusItem = document.createElement('li');

        if (gameState.language === 'en') {
            bonusItem.innerHTML = `
                <span>${bonus.emoji} Invite ${bonus.invited} friends: +${bonus.reward.toLocaleString()} coins</span>
                <span>${gameState.invitedFriends >= bonus.invited ? '‚úÖ' : `${gameState.invitedFriends}/${bonus.invited}`}</span>
            `;
        } else {
            bonusItem.innerHTML = `
                <span>${bonus.emoji} –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ ${bonus.invited} –¥—Ä—É–∑–µ–π: +${bonus.reward.toLocaleString()} –º–æ–Ω–µ—Ç</span>
                <span>${gameState.invitedFriends >= bonus.invited ? '‚úÖ' : `${gameState.invitedFriends}/${bonus.invited}`}</span>
            `;
        }

        if (gameState.invitedFriends >= bonus.invited && !bonus.completed) {
            bonus.completed = true;
            gameState.coins += bonus.reward;
            gameState.totalCoinsEarned += bonus.reward;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            alert(gameState.language === 'en'
                ? `You earned ${bonus.reward.toLocaleString()} coins for inviting ${bonus.invited} friends!`
                : `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${bonus.reward.toLocaleString()} –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${bonus.invited} –¥—Ä—É–∑–µ–π!`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            checkAchievements('referral', bonus.invited);
            checkAchievements('coins', bonus.reward);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
            saveGame();
        }

        bonusesList.appendChild(bonusItem);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements(type, amount) {
    let updated = false;

    for (const [id, achievement] of Object.entries(gameState.achievements)) {
        if (!achievement.completed) {
            let shouldUpdate = false;

            switch (type) {
                case 'click':
                    if (id.startsWith('clicker')) {
                        achievement.progress += amount;
                        shouldUpdate = achievement.progress >= achievement.target;
                    }
                    break;
                case 'coins':
                    if (id.startsWith('coin')) {
                        achievement.progress += amount;
                        shouldUpdate = achievement.progress >= achievement.target;
                    }
                    break;
                case 'combo':
                    if (id.startsWith('combo')) {
                        if (achievement.progress < amount) {
                            achievement.progress = amount;
                            shouldUpdate = achievement.progress >= achievement.target;
                        }
                    }
                    break;
                case 'upgrades':
                    if (id.startsWith('upgrade')) {
                        achievement.progress += amount;
                        shouldUpdate = achievement.progress >= achievement.target;
                    }
                    break;
                case 'daily':
                    if (id.startsWith('daily')) {
                        achievement.progress += amount;
                        shouldUpdate = achievement.progress >= achievement.target;
                    }
                    break;
                case 'referral':
                    if (id.startsWith('firstFriend') || id.startsWith('social') || id.startsWith('popular') ||
                        id.startsWith('influencer') || id.startsWith('viral')) {
                        if (achievement.progress < amount) {
                            achievement.progress = amount;
                            shouldUpdate = achievement.progress >= achievement.target;
                        }
                    }
                    break;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (id === 'energyEfficient' && type === 'click') {
                if (gameState.energy >= gameState.energyCost) {
                    achievement.progress += amount;
                    shouldUpdate = achievement.progress >= achievement.target;
                } else {
                    achievement.progress = 0;
                }
            }

            if (id === 'richAndFamous' && (type === 'coins' || type === 'referral')) {
                const hasCoins = gameState.totalCoinsEarned >= 50000;
                const hasFriends = gameState.invitedFriends >= 5;
                achievement.progress = hasCoins && hasFriends ? 1 : 0;
                shouldUpdate = achievement.progress >= achievement.target;
            }

            if (shouldUpdate) {
                achievement.completed = true;
                gameState.coins += achievement.reward;
                gameState.totalCoinsEarned += achievement.reward;
                updated = true;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
                alert(gameState.language === 'en'
                    ? `Achievement unlocked: ${achievement.name.en}! +${achievement.reward} coins`
                    : `–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name.ru}! +${achievement.reward} –º–æ–Ω–µ—Ç`);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "Completionist"
    checkCompletionist();

    if (updated) {
        renderAchievements();
        updateUI();
        saveGame();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "Completionist"
function checkCompletionist() {
    const completionist = gameState.achievements.completionist;
    if (!completionist.completed) {
        let allCompleted = true;

        for (const [id, achievement] of Object.entries(gameState.achievements)) {
            if (id !== 'completionist' && !achievement.completed) {
                allCompleted = false;
                break;
            }
        }

        if (allCompleted) {
            completionist.completed = true;
            const reward = Math.floor(gameState.totalCoinsEarned * 0.25);
            completionist.reward = reward;
            gameState.coins += reward;
            gameState.totalCoinsEarned += reward;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            alert(gameState.language === 'en'
                ? `All achievements completed! Bonus reward: ${reward.toLocaleString()} coins (+25% of total earned)`
                : `–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ë–æ–Ω—É—Å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${reward.toLocaleString()} –º–æ–Ω–µ—Ç (+25% –æ—Ç –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞)`);

            renderAchievements();
            updateUI();
            saveGame();
        }
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function copyReferralCode() {
    const referralCode = document.getElementById('referral-code');
    referralCode.select();
    document.execCommand('copy');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    alert(gameState.language === 'en'
        ? 'Referral code copied to clipboard!'
        : '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
function switchLanguage(lang) {
    gameState.language = lang;
    updateUI();
    renderUpgrades();
    renderAchievements();
    renderReferralBonuses();
    saveGame();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('[data-tab]').forEach(tab => {
        tab.classList.remove('active-tab');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelector(`[data-tab="${tabId}"]`).classList.add('active-tab');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === tabId);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
function initEvents() {
    // –ö–ª–∏–∫ –ø–æ –º–æ–Ω–µ—Ç–µ
    document.getElementById('click-coin').addEventListener('click', clickCoin);

    // –°–±–æ—Ä –º–æ–Ω–µ—Ç –æ—Ç –±–æ—Ç–∞
    document.getElementById('collect-bot').addEventListener('click', collectBotCoins);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    document.getElementById('claim-daily').addEventListener('click', claimDailyReward);

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    document.getElementById('copy-referral').addEventListener('click', copyReferralCode);

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
    document.getElementById('lang-en').addEventListener('click', () => switchLanguage('en'));
    document.getElementById('lang-ru').addEventListener('click', () => switchLanguage('ru'));

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', () => switchTab(btn.dataset.tab));
    });
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', () => {
    initEvents();
    loadGame();
});