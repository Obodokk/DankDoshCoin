// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Game State
const gameState = {
    balance: 0,
    clickPower: 1,
    energy: 100,
    maxEnergy: 100,
    totalClicks: 0,
    totalEarned: 0,
    autoEarned: 0,
    spentOnUpgrades: 0,
    playTime: 0,
    level: 1,
    xp: 0,
    combo: 0,
    highestCombo: 0,
    lastClickTime: 0,
    comboTimeout: null,
    totalCriticals: 0,
    highestCritical: 1,
    criticalChance: 0.05,
    criticalMultiplier: 2,
    boostsUsed: 0,
    boostEndTime: 0,
    fastClicks: 0,
    fullEnergyStreak: 0,
    highestMultiplier: 1,
    multipliers: {
        combo: 1,
        boost: 1,
        total: 1
    },
    upgrades: {
        clickPower: 1,
        autoClicker: 0,
        energy: 1,
        comboTime: 1,
        criticalChance: 1,
        criticalPower: 1,
        boost: 0
    },
    achievements: [],
    startTime: Date.now(),
    lastPlayDate: new Date().toDateString(),
    consecutiveDays: 1
};

// DOM Elements
const elements = {
    balance: document.getElementById('balance'),
    coin: document.getElementById('coin'),
    clickEffect: document.getElementById('click-effect'),
    clickPower: document.getElementById('click-power'),
    totalEarned: document.getElementById('total-earned'),
    autoClicker: document.getElementById('auto-clicker'),
    playerLevel: document.getElementById('player-level'),
    levelProgress: document.getElementById('level-progress'),
    levelProgressText: document.getElementById('level-progress-text'),
    energyText: document.getElementById('energy-text'),
    energyFill: document.getElementById('energy-fill'),
    energyValue: document.getElementById('energy-value'),
    currentMultiplier: document.getElementById('current-multiplier'),
    notification: document.getElementById('notification'),
    comboDisplay: document.getElementById('combo-display'),
    tabButtons: document.querySelectorAll('.tab-button'),
    tabContents: document.querySelectorAll('.tab-content'),
    upgradeClickBtn: document.getElementById('upgrade-click'),
    upgradeAutoBtn: document.getElementById('upgrade-auto'),
    upgradeEnergyBtn: document.getElementById('upgrade-energy'),
    upgradeComboBtn: document.getElementById('upgrade-combo'),
    upgradeCriticalBtn: document.getElementById('upgrade-critical'),
    upgradeBoostBtn: document.getElementById('upgrade-boost'),
    clickUpgradeCost: document.getElementById('click-upgrade-cost'),
    autoUpgradeCost: document.getElementById('auto-upgrade-cost'),
    energyUpgradeCost: document.getElementById('energy-upgrade-cost'),
    comboUpgradeCost: document.getElementById('combo-upgrade-cost'),
    criticalUpgradeCost: document.getElementById('critical-upgrade-cost'),
    boostUpgradeCost: document.getElementById('boost-upgrade-cost'),
    clickPowerLevel: document.getElementById('click-power-level'),
    clickPowerValue: document.getElementById('click-power-value'),
    autoClickerLevel: document.getElementById('auto-clicker-level'),
    autoClickerValue: document.getElementById('auto-clicker-value'),
    energyLevel: document.getElementById('energy-level'),
    energyMaxValue: document.getElementById('energy-max-value'),
    comboTimeLevel: document.getElementById('combo-time-level'),
    comboTimeValue: document.getElementById('combo-time-value'),
    comboMultiplierValue: document.getElementById('combo-multiplier-value'),
    criticalLevel: document.getElementById('critical-level'),
    criticalChance: document.getElementById('critical-chance'),
    criticalMultiplier: document.getElementById('critical-multiplier'),
    boostLevel: document.getElementById('boost-level'),
    boostValue: document.getElementById('boost-value'),
    boostDuration: document.getElementById('boost-duration'),
    statsTotalClicks: document.getElementById('stats-total-clicks'),
    statsTotalEarned: document.getElementById('stats-total-earned'),
    statsAutoEarned: document.getElementById('stats-auto-earned'),
    statsSpent: document.getElementById('stats-spent'),
    statsPlayTime: document.getElementById('stats-play-time'),
    statsCriticals: document.getElementById('stats-criticals'),
    statsHighestCritical: document.getElementById('stats-highest-critical'),
    statsMaxCombo: document.getElementById('stats-max-combo'),
    statsComboMultiplier: document.getElementById('stats-combo-multiplier'),
    statsBoostsUsed: document.getElementById('stats-boosts-used'),
    statsLevel: document.getElementById('stats-level'),
    statsLevelProgress: document.getElementById('stats-level-progress'),
    achievementsContainer: document.getElementById('achievements-container'),
    boostIndicator: document.getElementById('boost-indicator')
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const UPGRADE_COSTS = {
    clickPower: (level) => Math.floor(100 * Math.pow(1.5, level - 1)),
    autoClicker: (level) => Math.floor(1000 * Math.pow(2, level)),
    energy: (level) => Math.floor(500 * Math.pow(1.8, level - 1)),
    comboTime: (level) => Math.floor(750 * Math.pow(1.6, level - 1)),
    criticalChance: (level) => Math.floor(1200 * Math.pow(1.7, level - 1)),
    criticalPower: (level) => Math.floor(1200 * Math.pow(1.7, level - 1)),
    boost: (level) => Math.floor(2000 * Math.pow(1.8, level))
};

const XP_NEEDED = (level) => Math.floor(1000 * Math.pow(1.2, level - 1));

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const ACHIEVEMENTS = [
    { id: 'first_coin', name: '–ü–µ—Ä–≤–∞—è –º–æ–Ω–µ—Ç–∞', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É', condition: (s) => s.totalEarned >= 1, reward: 10, icon: 'üí∞' },
    { id: 'novice', name: '–ù–æ–≤–∏—á–æ–∫', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 DDC', condition: (s) => s.totalEarned >= 1000, reward: 100, icon: 'üë∂' },
    { id: 'click_master', name: '–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–∞', description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 100 –∫–ª–∏–∫–æ–≤', condition: (s) => s.totalClicks >= 100, reward: 50, icon: 'üëÜ' },
    { id: 'auto_farmer', name: '–ê–≤—Ç–æ—Ñ–µ—Ä–º–µ—Ä', description: '–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞', condition: (s) => s.upgrades.autoClicker >= 1, reward: 200, icon: 'ü§ñ' },
    { id: 'upgrader', name: '–£–ª—É—á—à–∞—Ç–µ–ª—å', description: '–ö—É–ø–∏—Ç–µ 5 —É–ª—É—á—à–µ–Ω–∏–π', condition: (s) => (s.upgrades.clickPower + s.upgrades.autoClicker + s.upgrades.energy) >= 5, reward: 250, icon: 'üîß' },
    { id: 'energy_keeper', name: '–≠–Ω–µ—Ä–¥–∂–∞–π–∑–µ—Ä', description: '–£–≤–µ–ª–∏—á—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–æ 200', condition: (s) => s.maxEnergy >= 200, reward: 300, icon: '‚ö°' },
    { id: 'rich', name: '–ë–æ–≥–∞—á', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10,000 DDC', condition: (s) => s.balance >= 10000, reward: 1000, icon: 'ü§ë' },
    { id: 'pro_player', name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è', condition: (s) => s.level >= 10, reward: 1500, icon: 'üèÜ' },
    { id: 'time_spender', name: '–í–µ—Ç–µ—Ä–∞–Ω', description: '–ò–≥—Ä–∞–π—Ç–µ –±–æ–ª–µ–µ 1 —á–∞—Å–∞', condition: (s) => s.playTime >= 3600, reward: 500, icon: '‚è≥' },
    { id: 'all_max', name: '–õ–µ–≥–µ–Ω–¥–∞ DankDosh', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç–µ –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', condition: (s) => s.upgrades.clickPower >= 20 && s.upgrades.autoClicker >= 10 && s.upgrades.energy >= 10, reward: 5000, icon: 'üåü' },
    { id: 'combo_beginner', name: '–ö–æ–º–±–æ-—Å—Ç–∞—Ä—Ç', description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∫–æ–º–±–æ x5', condition: (s) => s.highestCombo >= 5, reward: 100, icon: 'üéØ' },
    { id: 'combo_master', name: '–ú–∞—Å—Ç–µ—Ä –∫–æ–º–±–æ', description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∫–æ–º–±–æ x20', condition: (s) => s.highestCombo >= 20, reward: 500, icon: 'üéÆ' },
    { id: 'critical_hitter', name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä', description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 10 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–∫–æ–≤', condition: (s) => s.totalCriticals >= 10, reward: 300, icon: 'üí•' },
    { id: 'power_critical', name: '–ú–æ—â–Ω—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º x5 –∏–ª–∏ –≤—ã—à–µ', condition: (s) => s.highestCritical >= 5, reward: 800, icon: '‚ú®' },
    { id: 'fast_clicker', name: '–°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª', description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 10 –∫–ª–∏–∫–æ–≤ –∑–∞ 5 —Å–µ–∫—É–Ω–¥', condition: (s) => s.fastClicks >= 10, reward: 400, icon: '‚è±Ô∏è' },
    { id: 'energy_saver', name: '–≠–∫–æ–Ω–æ–º–Ω—ã–π', description: '–ò–º–µ–π—Ç–µ –ø–æ–ª–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é 10 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥', condition: (s) => s.fullEnergyStreak >= 10, reward: 350, icon: 'üîã' },
    { id: 'boost_lover', name: '–õ—é–±–∏—Ç–µ–ª—å –±—É—Å—Ç–æ–≤', description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 10 –±—É—Å—Ç–æ–≤', condition: (s) => s.boostsUsed >= 10, reward: 600, icon: 'üöÄ' },
    { id: 'multiplier_king', name: '–ö–æ—Ä–æ–ª—å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π', description: '–ò–º–µ–π—Ç–µ –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å x10 –∏–ª–∏ –≤—ã—à–µ', condition: (s) => s.highestMultiplier >= 10, reward: 1000, icon: 'üëë' },
    { id: 'daily_player', name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–∫', description: '–ó–∞–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', condition: (s) => s.consecutiveDays >= 7, reward: 700, icon: 'üìÖ' },
    { id: 'ultimate_player', name: '–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–≥—Ä–æ–∫', description: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', condition: (s) => s.achievements.length >= ACHIEVEMENTS.length - 1, reward: 5000, icon: 'üèÖ' }
];

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function initGame() {
    loadGameState();
    checkConsecutiveDays();
    setupEventListeners();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã
elements.coin.innerHTML = `
    <div class="no-select">
        <img src="https://github.com/Obodokk/DankDoshCoin/blob/main/DankDoshCoin.png?raw=true" 
             alt="DankDoshCoin" 
             class="coin-image">
    </div>
`;

document.addEventListener('selectstart', function(e) {
    if (e.target === elements.coin || e.target.closest('.coin')) {
        e.preventDefault();
    }
});

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤
    setInterval(gameLoop, 1000);
    setInterval(autoClickerLoop, 1000 * 60 * 60 * 12);

    updateUI();
    renderAchievements();
}

function gameLoop() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    gameState.playTime = Math.floor((Date.now() - gameState.startTime) / 1000);

    // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
    if (gameState.energy < gameState.maxEnergy) {
        gameState.energy = Math.min(gameState.maxEnergy, gameState.energy + 0.2);
        if (gameState.energy === gameState.maxEnergy) {
            gameState.fullEnergyStreak++;
        } else {
            gameState.fullEnergyStreak = 0;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–∞
    if (gameState.upgrades.boost > 0 && Date.now() > gameState.boostEndTime) {
        gameState.upgrades.boost = 0;
        elements.boostIndicator.style.display = 'none';
    }

    updateUI();
    checkAchievements();
    saveGameState();
}

function autoClickerLoop() {
    if (gameState.upgrades.autoClicker > 0) {
        const earned = 500 * gameState.upgrades.autoClicker;
        gameState.balance += earned;
        gameState.totalEarned += earned;
        gameState.autoEarned += earned;
        addXP(earned * 0.5);

        showNotification(`–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${earned} DDC!`);
        updateUI();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    elements.coin.addEventListener('click', handleCoinClick);

    elements.upgradeClickBtn.addEventListener('click', () => upgrade('clickPower'));
    elements.upgradeAutoBtn.addEventListener('click', () => upgrade('autoClicker'));
    elements.upgradeEnergyBtn.addEventListener('click', () => upgrade('energy'));
    elements.upgradeComboBtn.addEventListener('click', () => upgrade('comboTime'));
    elements.upgradeCriticalBtn.addEventListener('click', () => upgrade('criticalChance'));
    elements.upgradeBoostBtn.addEventListener('click', activateBoost);

    elements.tabButtons.forEach(button => {
        button.addEventListener('click', () => switchTab(button.dataset.tab));
    });
}

function handleCoinClick() {
    if (gameState.energy <= 0) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!');
        return;
    }

    const now = Date.now();
    const timeDiff = now - gameState.lastClickTime;

    // –ö–æ–º–±–æ —Å–∏—Å—Ç–µ–º–∞
    const comboTime = 2 - (gameState.upgrades.comboTime - 1) * 0.1;
    if (timeDiff < 1000 * comboTime) {
        gameState.combo++;
        clearTimeout(gameState.comboTimeout);
        gameState.comboTimeout = setTimeout(() => {
            gameState.combo = 0;
            calculateMultipliers();
            updateComboUI();
        }, 1000 * comboTime);
    } else {
        gameState.combo = 1;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–æ–≤
    if (timeDiff < 500) gameState.fastClicks++;
    else gameState.fastClicks = 0;

    gameState.lastClickTime = now;
    gameState.highestCombo = Math.max(gameState.highestCombo, gameState.combo);

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä
    const isCritical = Math.random() < (0.05 * gameState.upgrades.criticalChance);
    let earned = gameState.clickPower;
    let multiplier = 1;

    if (isCritical) {
        const critMult = 2 + (gameState.upgrades.criticalPower - 1) * 0.5;
        multiplier *= critMult;
        animateCritical(critMult);
        gameState.totalCriticals++;
        gameState.highestCritical = Math.max(gameState.highestCritical, critMult);
    }

    calculateMultipliers();
    multiplier *= gameState.multipliers.total;
    earned = Math.floor(earned * multiplier);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    gameState.balance += earned;
    gameState.totalEarned += earned;
    gameState.totalClicks++;
    gameState.energy -= 1;
    addXP(earned);

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    animateCoin();
    showClickEffect(earned);
    updateUI();
    saveGameState();
}

// –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏–π
function upgrade(type) {
    const cost = UPGRADE_COSTS[type](gameState.upgrades[type] + (type === 'boost' ? 1 : 0));

    if (gameState.balance >= cost) {
        gameState.balance -= cost;
        gameState.spentOnUpgrades += cost;
        gameState.upgrades[type]++;

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
        if (type === 'clickPower') {
            gameState.clickPower = gameState.upgrades.clickPower;
        } else if (type === 'energy') {
            gameState.maxEnergy = 100 + (gameState.upgrades.energy - 1) * 20;
            gameState.energy = gameState.maxEnergy;
        }

        showNotification(`–£–ª—É—á—à–µ–Ω–∏–µ "${getUpgradeName(type)}" –∫—É–ø–ª–µ–Ω–æ!`);
        updateUI();
        saveGameState();
        addXP(cost * 0.2);
    }
}

function activateBoost() {
    const cost = UPGRADE_COSTS.boost(gameState.upgrades.boost + 1);

    if (gameState.balance >= cost) {
        gameState.balance -= cost;
        gameState.spentOnUpgrades += cost;
        gameState.upgrades.boost++;
        gameState.boostsUsed++;
        gameState.boostEndTime = Date.now() + 3600000 * gameState.upgrades.boost;

        elements.boostIndicator.style.display = 'block';
        showNotification(`–ë—É—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${gameState.upgrades.boost * 50}% –Ω–∞ ${gameState.upgrades.boost} —á–∞—Å–æ–≤`);

        updateUI();
        saveGameState();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateMultipliers() {
    const comboMult = gameState.combo > 1 ? 1 + gameState.combo * 0.05 : 1;
    const boostMult = (gameState.upgrades.boost > 0 && Date.now() < gameState.boostEndTime) ?
        1 + gameState.upgrades.boost * 0.5 : 1;

    gameState.multipliers = {
        combo: comboMult,
        boost: boostMult,
        total: comboMult * boostMult
    };

    gameState.highestMultiplier = Math.max(gameState.highestMultiplier, gameState.multipliers.total);
}

function addXP(amount) {
    gameState.xp += amount;
    const xpNeeded = XP_NEEDED(gameState.level);

    if (gameState.xp >= xpNeeded) {
        gameState.xp -= xpNeeded;
        gameState.level++;
        showNotification(`–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã ${gameState.level} —É—Ä–æ–≤–Ω—è!`);
    }
}

function updateComboUI() {
    if (gameState.combo > 1) {
        elements.comboDisplay.innerHTML = `
            <span class="combo-count">${gameState.combo}</span> –∫–æ–º–±–æ
            <span class="combo-multiplier">x${(1 + gameState.combo * 0.05).toFixed(2)}</span>
        `;
        elements.comboDisplay.classList.add('active');
    } else {
        elements.comboDisplay.classList.remove('active');
    }
}

// –ê–Ω–∏–º–∞—Ü–∏–∏
function animateCoin() {
    elements.coin.style.transform = 'scale(0.9)';
    elements.coin.style.transition = 'transform 0.1s ease-out';

    setTimeout(() => {
        elements.coin.style.transform = 'scale(1)';
        elements.coin.style.transition = 'transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
    }, 100);
}

function animateCritical(multiplier) {
    const effect = document.createElement('div');
    effect.className = 'critical-effect';
    effect.textContent = `CRIT! x${multiplier.toFixed(1)}`;
    effect.style.left = `${Math.random() * 50 + 25}%`;
    effect.style.animation = 'critical-float 1.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';
    document.body.appendChild(effect);

    setTimeout(() => effect.remove(), 1500);
}

function showClickEffect(amount) {
    elements.clickEffect.textContent = `+${amount}`;
    elements.clickEffect.style.animation = 'none';
    void elements.clickEffect.offsetWidth;
    elements.clickEffect.style.animation = 'float-up 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    // –û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
    elements.balance.textContent = gameState.balance.toLocaleString();
    elements.clickPower.textContent = gameState.clickPower;
    elements.totalEarned.textContent = gameState.totalEarned.toLocaleString();
    elements.autoClicker.textContent = gameState.upgrades.autoClicker;
    elements.playerLevel.textContent = gameState.level;

    // –≠–Ω–µ—Ä–≥–∏—è
    const energyPercent = (gameState.energy / gameState.maxEnergy) * 100;
    elements.energyText.textContent = `${Math.floor(gameState.energy)}/${gameState.maxEnergy}`;
    elements.energyFill.style.width = `${energyPercent}%`;
    elements.energyValue.textContent = `${Math.floor(energyPercent)}%`;



    // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
    elements.currentMultiplier.textContent = gameState.multipliers.total.toFixed(2);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π
    updateUpgradeButtons();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    updateStats();
}

function updateUpgradeButtons() {
    elements.clickPowerLevel.textContent = gameState.upgrades.clickPower;
    elements.clickPowerValue.textContent = gameState.upgrades.clickPower;
    elements.autoClickerLevel.textContent = gameState.upgrades.autoClicker;
    elements.autoClickerValue.textContent = 500 * gameState.upgrades.autoClicker;
    elements.energyLevel.textContent = gameState.upgrades.energy;
    elements.energyMaxValue.textContent = 100 + (gameState.upgrades.energy - 1) * 20;
    elements.comboTimeLevel.textContent = gameState.upgrades.comboTime;
    elements.comboTimeValue.textContent = (2 - (gameState.upgrades.comboTime - 1) * 0.1).toFixed(1);
    elements.criticalLevel.textContent = gameState.upgrades.criticalChance;
    elements.criticalChance.textContent = (5 * gameState.upgrades.criticalChance).toFixed(1);
    elements.criticalMultiplier.textContent = (2 + (gameState.upgrades.criticalPower - 1) * 0.5).toFixed(1);
    elements.boostLevel.textContent = gameState.upgrades.boost;
    elements.boostValue.textContent = (1 + gameState.upgrades.boost * 0.5).toFixed(1);
    elements.boostDuration.textContent = gameState.upgrades.boost;

    // –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–π
    elements.clickUpgradeCost.textContent = UPGRADE_COSTS.clickPower(gameState.upgrades.clickPower).toLocaleString();
    elements.autoUpgradeCost.textContent = UPGRADE_COSTS.autoClicker(gameState.upgrades.autoClicker).toLocaleString();
    elements.energyUpgradeCost.textContent = UPGRADE_COSTS.energy(gameState.upgrades.energy).toLocaleString();
    elements.comboUpgradeCost.textContent = UPGRADE_COSTS.comboTime(gameState.upgrades.comboTime).toLocaleString();
    elements.criticalUpgradeCost.textContent = UPGRADE_COSTS.criticalChance(gameState.upgrades.criticalChance).toLocaleString();
    elements.boostUpgradeCost.textContent = UPGRADE_COSTS.boost(gameState.upgrades.boost + 1).toLocaleString();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    elements.upgradeClickBtn.disabled = gameState.balance < UPGRADE_COSTS.clickPower(gameState.upgrades.clickPower);
    elements.upgradeAutoBtn.disabled = gameState.balance < UPGRADE_COSTS.autoClicker(gameState.upgrades.autoClicker);
    elements.upgradeEnergyBtn.disabled = gameState.balance < UPGRADE_COSTS.energy(gameState.upgrades.energy);
    elements.upgradeComboBtn.disabled = gameState.balance < UPGRADE_COSTS.comboTime(gameState.upgrades.comboTime);
    elements.upgradeCriticalBtn.disabled = gameState.balance < UPGRADE_COSTS.criticalChance(gameState.upgrades.criticalChance);
    elements.upgradeBoostBtn.disabled = gameState.balance < UPGRADE_COSTS.boost(gameState.upgrades.boost + 1);
}

function updateStats() {
    elements.statsTotalClicks.textContent = gameState.totalClicks.toLocaleString();
    elements.statsTotalEarned.textContent = gameState.totalEarned.toLocaleString();
    elements.statsAutoEarned.textContent = gameState.autoEarned.toLocaleString();
    elements.statsSpent.textContent = gameState.spentOnUpgrades.toLocaleString();
    elements.statsCriticals.textContent = gameState.totalCriticals;
    elements.statsHighestCritical.textContent = gameState.highestCritical.toFixed(1);
    elements.statsMaxCombo.textContent = gameState.highestCombo;
    elements.statsComboMultiplier.textContent = (1 + gameState.highestCombo * 0.05).toFixed(2);
    elements.statsBoostsUsed.textContent = gameState.boostsUsed;
    elements.statsLevel.textContent = gameState.level;

    // –í—Ä–µ–º—è –∏–≥—Ä—ã
    const hours = Math.floor(gameState.playTime / 3600);
    const minutes = Math.floor((gameState.playTime % 3600) / 60);
    const seconds = gameState.playTime % 60;
    elements.statsPlayTime.textContent = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

    // –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    const statsProgressPercent = (gameState.xp / XP_NEEDED(gameState.level)) * 100;
    elements.statsLevelProgress.style.width = `${statsProgressPercent}%`;
}

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function checkAchievements() {
    let newAchievements = false;

    ACHIEVEMENTS.forEach(achievement => {
        if (!gameState.achievements.includes(achievement.id) && achievement.condition(gameState)) {
            gameState.achievements.push(achievement.id);
            gameState.balance += achievement.reward;
            showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.name}" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! +${achievement.reward} DDC`);
            newAchievements = true;
        }
    });

    if (newAchievements) {
        renderAchievements();
        updateUI();
    }
}

function renderAchievements() {
    elements.achievementsContainer.innerHTML = '';

    ACHIEVEMENTS.forEach(achievement => {
        const isUnlocked = gameState.achievements.includes(achievement.id);

        const achievementCard = document.createElement('div');
        achievementCard.className = `achievement-card ${isUnlocked ? 'unlocked' : ''}`;

        achievementCard.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <h3>${achievement.name}</h3>
                <p>${achievement.description}</p>
                ${isUnlocked ? `<div class="achievement-reward">+${achievement.reward} DDC</div>` : ''}
            </div>
        `;

        elements.achievementsContainer.appendChild(achievementCard);
    });
}

// –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function saveGameState() {
    const saveData = {
        ...gameState,
        startTime: undefined,
        comboTimeout: null
    };
    localStorage.setItem('dankDoshCoinSave', JSON.stringify(saveData));
}

function loadGameState() {
    const saveData = JSON.parse(localStorage.getItem('dankDoshCoinSave'));
    if (saveData) {
        for (const key in saveData) {
            if (key !== 'startTime' && key !== 'comboTimeout') {
                gameState[key] = saveData[key];
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    gameState.maxEnergy = 100 + (gameState.upgrades.energy - 1) * 20;
    gameState.energy = Math.min(gameState.energy, gameState.maxEnergy);
    gameState.clickPower = gameState.upgrades.clickPower;

    if (gameState.upgrades.boost > 0 && Date.now() > gameState.boostEndTime) {
        gameState.upgrades.boost = 0;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function checkConsecutiveDays() {
    const today = new Date().toDateString();
    const lastPlayed = new Date(gameState.lastPlayDate);
    const currentDate = new Date();

    if ((currentDate - lastPlayed) > 86400000 * 2) {
        gameState.consecutiveDays = 1;
    } else if ((currentDate - lastPlayed) <= 86400000 * 2 && (currentDate - lastPlayed) > 86400000) {
        gameState.consecutiveDays++;
    }

    gameState.lastPlayDate = today;
}

function showNotification(message) {
    elements.notification.textContent = message;
    elements.notification.classList.add('show');

    setTimeout(() => {
        elements.notification.classList.remove('show');
    }, 3000);
}

function switchTab(tabId) {
    elements.tabButtons.forEach(button => {
        button.classList.toggle('active', button.dataset.tab === tabId);
    });

    elements.tabContents.forEach(content => {
        content.classList.toggle('active', content.id === tabId);
    });
}

function getUpgradeName(type) {
    const names = {
        clickPower: '–°–∏–ª–∞ –∫–ª–∏–∫–∞',
        autoClicker: '–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä',
        energy: '–≠–Ω–µ—Ä–≥–∏—è',
        comboTime: '–í—Ä–µ–º—è –∫–æ–º–±–æ',
        criticalChance: '–®–∞–Ω—Å –∫—Ä–∏—Ç–∞',
        criticalPower: '–°–∏–ª–∞ –∫—Ä–∏—Ç–∞',
        boost: '–ë—É—Å—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏'
    };
    return names[type] || type;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', initGame);
